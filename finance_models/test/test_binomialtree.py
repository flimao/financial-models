#!/usr/bin/env python3
#-*- coding: utf-8 -*-

import datetime as dt
import numpy as np
import pandas as pd
from .. import portfolio, tools, volatility as volm, derivatives
from ..derivatives import binomialtree as bt
import unittest

import warnings
warnings.filterwarnings('ignore')

M = tools.Money

class TestBinomialTree(unittest.TestCase):
    def setUp(self):

        pf_params_idx = pd.DatetimeIndex(
        [
            '2020-03-04 00:00:00',
            '2020-03-05 00:00:00',
            '2020-03-06 00:00:00',
            '2020-03-09 00:00:00',
            '2020-03-10 00:00:00',
            '2020-03-11 00:00:00',
            '2020-03-12 00:00:00',
            '2020-03-13 00:00:00',
            '2020-03-16 00:00:00',
            '2020-03-17 00:00:00',
            '2020-03-18 00:00:00',
            '2020-03-19 00:00:00',
            '2020-03-20 00:00:00',
            '2020-03-23 00:00:00',
            '2020-03-24 00:00:00',
            '2020-03-25 00:00:00',
            '2020-03-26 00:00:00',
            '2020-03-27 00:00:00',
            '2020-03-30 00:00:00',
            '2020-03-31 00:00:00',
            '2020-04-01 00:00:00',
            '2020-04-02 00:00:00',
            '2020-04-03 00:00:00',
            '2020-04-06 00:00:00',
            '2020-04-07 00:00:00',
            '2020-04-08 00:00:00',
            '2020-04-09 00:00:00',
            '2020-04-10 00:00:00',
            '2020-04-13 00:00:00',
            '2020-04-14 00:00:00',
            '2020-04-15 00:00:00',
            '2020-04-16 00:00:00',
            '2020-04-17 00:00:00',
            '2020-04-20 00:00:00',
            '2020-04-21 00:00:00',
            '2020-04-22 00:00:00',
            '2020-04-23 00:00:00',
            '2020-04-24 00:00:00',
            '2020-04-27 00:00:00',
            '2020-04-28 00:00:00',
            '2020-04-29 00:00:00',
            '2020-04-30 00:00:00',
            '2020-05-01 00:00:00',
            '2020-05-04 00:00:00',
            '2020-05-05 00:00:00',
            '2020-05-06 00:00:00',
            '2020-05-07 00:00:00',
            '2020-05-08 00:00:00',
            '2020-05-11 00:00:00',
            '2020-05-12 00:00:00',
            '2020-05-13 00:00:00',
            '2020-05-14 00:00:00',
            '2020-05-15 00:00:00',
            '2020-05-18 00:00:00',
            '2020-05-19 00:00:00',
            '2020-05-20 00:00:00',
            '2020-05-21 00:00:00',
            '2020-05-22 00:00:00',
            '2020-05-25 00:00:00',
            '2020-05-26 00:00:00',
            '2020-05-27 00:00:00',
            '2020-05-28 00:00:00',
            '2020-05-29 00:00:00',
            '2020-06-01 00:00:00',
            '2020-06-02 00:00:00',
            '2020-06-03 00:00:00',
            '2020-06-04 00:00:00',
            '2020-06-05 00:00:00',
            '2020-06-08 00:00:00',
            '2020-06-09 00:00:00',
            '2020-06-10 00:00:00',
            '2020-06-11 00:00:00',
            '2020-06-12 00:00:00',
            '2020-06-15 00:00:00',
            '2020-06-16 00:00:00',
            '2020-06-17 00:00:00',
            '2020-06-18 00:00:00',
            '2020-06-19 00:00:00',
            '2020-06-22 00:00:00',
            '2020-06-23 00:00:00',
            '2020-06-24 00:00:00',
            '2020-06-25 00:00:00',
            '2020-06-26 00:00:00',
            '2020-06-29 00:00:00',
            '2020-06-30 00:00:00',
            '2020-07-01 00:00:00',
            '2020-07-02 00:00:00',
            '2020-07-03 00:00:00',
            '2020-07-06 00:00:00',
            '2020-07-07 00:00:00',
            '2020-07-08 00:00:00',
            '2020-07-09 00:00:00',
            '2020-07-10 00:00:00',
            '2020-07-13 00:00:00',
            '2020-07-14 00:00:00',
            '2020-07-15 00:00:00',
            '2020-07-16 00:00:00',
            '2020-07-17 00:00:00',
            '2020-07-20 00:00:00',
            '2020-07-21 00:00:00',
            '2020-07-22 00:00:00',
            '2020-07-23 00:00:00',
            '2020-07-24 00:00:00',
            '2020-07-27 00:00:00',
            '2020-07-28 00:00:00',
            '2020-07-29 00:00:00',
            '2020-07-30 00:00:00',
            '2020-07-31 00:00:00',
            '2020-08-03 00:00:00',
            '2020-08-04 00:00:00',
            '2020-08-05 00:00:00',
            '2020-08-06 00:00:00',
            '2020-08-07 00:00:00',
            '2020-08-10 00:00:00',
            '2020-08-11 00:00:00',
            '2020-08-12 00:00:00',
            '2020-08-13 00:00:00',
            '2020-08-14 00:00:00',
            '2020-08-17 00:00:00',
            '2020-08-18 00:00:00',
            '2020-08-19 00:00:00',
            '2020-08-20 00:00:00',
            '2020-08-21 00:00:00',
            '2020-08-24 00:00:00',
            '2020-08-25 00:00:00',
            '2020-08-26 00:00:00',
            '2020-08-27 00:00:00',
            '2020-08-28 00:00:00',
            '2020-08-31 00:00:00',
            '2020-09-01 00:00:00',
            '2020-09-02 00:00:00',
            '2020-09-03 00:00:00',
            '2020-09-04 00:00:00',
            '2020-09-07 00:00:00',
            '2020-09-08 00:00:00',
            '2020-09-09 00:00:00',
            '2020-09-10 00:00:00',
            '2020-09-11 00:00:00',
            '2020-09-14 00:00:00',
            '2020-09-15 00:00:00',
            '2020-09-16 00:00:00',
            '2020-09-17 00:00:00',
            '2020-09-18 00:00:00',
            '2020-09-21 00:00:00',
            '2020-09-22 00:00:00',
            '2020-09-23 00:00:00',
            '2020-09-24 00:00:00',
            '2020-09-25 00:00:00',
            '2020-09-28 00:00:00',
            '2020-09-29 00:00:00',
            '2020-09-30 00:00:00',
            '2020-10-01 00:00:00',
            '2020-10-02 00:00:00',
            '2020-10-05 00:00:00',
            '2020-10-06 00:00:00',
            '2020-10-07 00:00:00',
            '2020-10-08 00:00:00',
            '2020-10-09 00:00:00',
            '2020-10-12 00:00:00',
            '2020-10-13 00:00:00',
            '2020-10-14 00:00:00',
            '2020-10-15 00:00:00',
            '2020-10-16 00:00:00',
            '2020-10-19 00:00:00',
            '2020-10-20 00:00:00',
            '2020-10-21 00:00:00',
            '2020-10-22 00:00:00',
            '2020-10-23 00:00:00',
            '2020-10-26 00:00:00',
            '2020-10-27 00:00:00',
            '2020-10-28 00:00:00',
            '2020-10-29 00:00:00',
            '2020-10-30 00:00:00',
            '2020-11-02 00:00:00',
            '2020-11-03 00:00:00',
            '2020-11-04 00:00:00',
            '2020-11-05 00:00:00',
            '2020-11-06 00:00:00',
            '2020-11-09 00:00:00',
            '2020-11-10 00:00:00',
            '2020-11-11 00:00:00',
            '2020-11-12 00:00:00',
            '2020-11-13 00:00:00',
            '2020-11-16 00:00:00',
            '2020-11-17 00:00:00',
            '2020-11-18 00:00:00',
            '2020-11-19 00:00:00',
            '2020-11-20 00:00:00',
            '2020-11-23 00:00:00',
            '2020-11-24 00:00:00',
            '2020-11-25 00:00:00',
            '2020-11-26 00:00:00',
            '2020-11-27 00:00:00',
            '2020-11-30 00:00:00',
            '2020-12-01 00:00:00',
            '2020-12-02 00:00:00',
            '2020-12-03 00:00:00',
            '2020-12-04 00:00:00',
            '2020-12-07 00:00:00',
            '2020-12-08 00:00:00',
            '2020-12-09 00:00:00',
            '2020-12-10 00:00:00',
            '2020-12-11 00:00:00',
            '2020-12-14 00:00:00',
            '2020-12-15 00:00:00',
            '2020-12-16 00:00:00',
            '2020-12-17 00:00:00',
            '2020-12-18 00:00:00',
            '2020-12-21 00:00:00',
            '2020-12-22 00:00:00',
            '2020-12-23 00:00:00',
            '2020-12-24 00:00:00',
            '2020-12-25 00:00:00',
            '2020-12-28 00:00:00',
            '2020-12-29 00:00:00',
            '2020-12-30 00:00:00',
            '2020-12-31 00:00:00',
            '2021-01-01 00:00:00',
            '2021-01-04 00:00:00',
            '2021-01-05 00:00:00',
            '2021-01-06 00:00:00',
            '2021-01-07 00:00:00',
            '2021-01-08 00:00:00',
            '2021-01-11 00:00:00',
            '2021-01-12 00:00:00',
            '2021-01-13 00:00:00',
            '2021-01-14 00:00:00',
            '2021-01-15 00:00:00',
            '2021-01-18 00:00:00',
            '2021-01-19 00:00:00',
            '2021-01-20 00:00:00',
            '2021-01-21 00:00:00',
            '2021-01-22 00:00:00',
            '2021-01-25 00:00:00',
            '2021-01-26 00:00:00',
            '2021-01-27 00:00:00',
            '2021-01-28 00:00:00',
            '2021-01-29 00:00:00',
            '2021-02-01 00:00:00',
            '2021-02-02 00:00:00',
            '2021-02-03 00:00:00',
            '2021-02-04 00:00:00',
            '2021-02-05 00:00:00',
            '2021-02-08 00:00:00',
            '2021-02-09 00:00:00',
            '2021-02-10 00:00:00',
            '2021-02-11 00:00:00',
            '2021-02-12 00:00:00',
            '2021-02-15 00:00:00',
            '2021-02-16 00:00:00',
            '2021-02-17 00:00:00',
            '2021-02-18 00:00:00',
            '2021-02-19 00:00:00',
            '2021-02-22 00:00:00',
            '2021-02-23 00:00:00',
            '2021-02-24 00:00:00',
            '2021-02-25 00:00:00',
            '2021-02-26 00:00:00',
            '2021-03-01 00:00:00',
            '2021-03-02 00:00:00',
            '2021-03-03 00:00:00',
            '2021-03-04 00:00:00',
            '2021-03-05 00:00:00',
            '2021-03-08 00:00:00',
            '2021-03-09 00:00:00',
            '2021-03-10 00:00:00',
            '2021-03-11 00:00:00',
            '2021-03-12 00:00:00',
            '2021-03-15 00:00:00',
            '2021-03-16 00:00:00',
            '2021-03-17 00:00:00',
            '2021-03-18 00:00:00',
            '2021-03-19 00:00:00',
            '2021-03-22 00:00:00',
            '2021-03-23 00:00:00',
            '2021-03-24 00:00:00',
            '2021-03-25 00:00:00',
            '2021-03-26 00:00:00',
            '2021-03-29 00:00:00',
            '2021-03-30 00:00:00',
            '2021-03-31 00:00:00',
            '2021-04-01 00:00:00',
            '2021-04-02 00:00:00',
            '2021-04-05 00:00:00',
            '2021-04-06 00:00:00',
            '2021-04-07 00:00:00',
            '2021-04-08 00:00:00',
            '2021-04-09 00:00:00',
            '2021-04-12 00:00:00',
            '2021-04-13 00:00:00',
            '2021-04-14 00:00:00',
            '2021-04-15 00:00:00',
            '2021-04-16 00:00:00',
            '2021-04-19 00:00:00',
            '2021-04-20 00:00:00',
            '2021-04-21 00:00:00',
            '2021-04-22 00:00:00',
            '2021-04-23 00:00:00',
            '2021-04-26 00:00:00',
            '2021-04-27 00:00:00',
            '2021-04-28 00:00:00',
            '2021-04-29 00:00:00',
            '2021-04-30 00:00:00',
            '2021-05-03 00:00:00',
            '2021-05-04 00:00:00',
            '2021-05-05 00:00:00',
            '2021-05-06 00:00:00',
            '2021-05-07 00:00:00',
            '2021-05-10 00:00:00',
            '2021-05-11 00:00:00',
            '2021-05-12 00:00:00',
            '2021-05-13 00:00:00',
            '2021-05-14 00:00:00',
            '2021-05-17 00:00:00',
            '2021-05-18 00:00:00',
            '2021-05-19 00:00:00',
            '2021-05-20 00:00:00',
            '2021-05-21 00:00:00',
            '2021-05-24 00:00:00',
            '2021-05-25 00:00:00',
            '2021-05-26 00:00:00',
            '2021-05-27 00:00:00',
            '2021-05-28 00:00:00',
            '2021-05-31 00:00:00',
            '2021-06-01 00:00:00',
            '2021-06-02 00:00:00',
            '2021-06-03 00:00:00',
            '2021-06-04 00:00:00',
            '2021-06-07 00:00:00',
            '2021-06-08 00:00:00',
            '2021-06-09 00:00:00',
            '2021-06-10 00:00:00',
            '2021-06-11 00:00:00',
            '2021-06-14 00:00:00',
            '2021-06-15 00:00:00',
            '2021-06-16 00:00:00',
            '2021-06-17 00:00:00',
            '2021-06-18 00:00:00',
            '2021-06-21 00:00:00',
            '2021-06-22 00:00:00',
            '2021-06-23 00:00:00',
            '2021-06-24 00:00:00',
            '2021-06-25 00:00:00',
            '2021-06-28 00:00:00',
            '2021-06-29 00:00:00',
            '2021-06-30 00:00:00',
            '2021-07-01 00:00:00',
            '2021-07-02 00:00:00',
            '2021-07-05 00:00:00',
            '2021-07-06 00:00:00',
            '2021-07-07 00:00:00',
            '2021-07-08 00:00:00',
            '2021-07-09 00:00:00',
            '2021-07-12 00:00:00',
            '2021-07-13 00:00:00',
            '2021-07-14 00:00:00',
            '2021-07-15 00:00:00',
            '2021-07-16 00:00:00',
            '2021-07-19 00:00:00',
            '2021-07-20 00:00:00',
            '2021-07-21 00:00:00',
            '2021-07-22 00:00:00',
            '2021-07-23 00:00:00',
            '2021-07-26 00:00:00',
            '2021-07-27 00:00:00',
            '2021-07-28 00:00:00',
            '2021-07-29 00:00:00',
            '2021-07-30 00:00:00',
            '2021-08-02 00:00:00',
            '2021-08-03 00:00:00',
            '2021-08-04 00:00:00',
            '2021-08-05 00:00:00',
            '2021-08-06 00:00:00',
            '2021-08-09 00:00:00',
            '2021-08-10 00:00:00',
            '2021-08-11 00:00:00',
            '2021-08-12 00:00:00',
            '2021-08-13 00:00:00',
            '2021-08-16 00:00:00',
            '2021-08-17 00:00:00',
            '2021-08-18 00:00:00',
            '2021-08-19 00:00:00',
            '2021-08-20 00:00:00',
            '2021-08-23 00:00:00',
            '2021-08-24 00:00:00',
            '2021-08-25 00:00:00',
            '2021-08-26 00:00:00',
            '2021-08-27 00:00:00',
            '2021-08-30 00:00:00',
            '2021-08-31 00:00:00',
            '2021-09-01 00:00:00',
            '2021-09-02 00:00:00',
            '2021-09-03 00:00:00',
            '2021-09-06 00:00:00',
            '2021-09-07 00:00:00',
            '2021-09-08 00:00:00',
            '2021-09-09 00:00:00',
            '2021-09-10 00:00:00',
            '2021-09-13 00:00:00',
            '2021-09-14 00:00:00',
            '2021-09-15 00:00:00',
            '2021-09-16 00:00:00',
            '2021-09-17 00:00:00',
            '2021-09-20 00:00:00',
            '2021-09-21 00:00:00',
            '2021-09-22 00:00:00',
            '2021-09-23 00:00:00',
            '2021-09-24 00:00:00',
            '2021-09-27 00:00:00',
            '2021-09-28 00:00:00',
            '2021-09-29 00:00:00',
            '2021-09-30 00:00:00',
            '2021-10-01 00:00:00',
            '2021-10-04 00:00:00',
            '2021-10-05 00:00:00',
            '2021-10-06 00:00:00',
            '2021-10-07 00:00:00',
            '2021-10-08 00:00:00',
            '2021-10-11 00:00:00',
            '2021-10-12 00:00:00',
            '2021-10-13 00:00:00',
            '2021-10-14 00:00:00',
            '2021-10-15 00:00:00',
            '2021-10-18 00:00:00',
            '2021-10-19 00:00:00',
            '2021-10-20 00:00:00',
            '2021-10-21 00:00:00',
            '2021-10-22 00:00:00',
            '2021-10-25 00:00:00',
            '2021-10-26 00:00:00',
            '2021-10-27 00:00:00',
            '2021-10-28 00:00:00',
            '2021-10-29 00:00:00',
            '2021-11-01 00:00:00',
            '2021-11-02 00:00:00',
            '2021-11-03 00:00:00',
            '2021-11-04 00:00:00',
            '2021-11-05 00:00:00',
            '2021-11-08 00:00:00',
            '2021-11-09 00:00:00',
            '2021-11-10 00:00:00',
            '2021-11-11 00:00:00',
            '2021-11-12 00:00:00',
            '2021-11-15 00:00:00',
            '2021-11-16 00:00:00',
            '2021-11-17 00:00:00',
            '2021-11-18 00:00:00',
            '2021-11-19 00:00:00',
            '2021-11-22 00:00:00',
            '2021-11-23 00:00:00',
            '2021-11-24 00:00:00',
            '2021-11-25 00:00:00',
            '2021-11-26 00:00:00',
            '2021-11-29 00:00:00',
            '2021-11-30 00:00:00',
            '2021-12-01 00:00:00',
            '2021-12-02 00:00:00',
            '2021-12-03 00:00:00',
            '2021-12-06 00:00:00',
            '2021-12-07 00:00:00',
            '2021-12-08 00:00:00',
            '2021-12-09 00:00:00',
            '2021-12-10 00:00:00',
            '2021-12-13 00:00:00',
            '2021-12-14 00:00:00',
            '2021-12-15 00:00:00',
            '2021-12-16 00:00:00',
            '2021-12-17 00:00:00',
            '2021-12-20 00:00:00',
            '2021-12-21 00:00:00',
            '2021-12-22 00:00:00',
            '2021-12-23 00:00:00',
            '2021-12-24 00:00:00',
            '2021-12-27 00:00:00',
            '2021-12-28 00:00:00',
            '2021-12-29 00:00:00',
            '2021-12-30 00:00:00',
            '2021-12-31 00:00:00',
            '2022-01-03 00:00:00',
            '2022-01-04 00:00:00',
            '2022-01-05 00:00:00',
            '2022-01-06 00:00:00',
            '2022-01-07 00:00:00',
            '2022-01-10 00:00:00',
            '2022-01-11 00:00:00',
            '2022-01-12 00:00:00',
            '2022-01-13 00:00:00',
            '2022-01-14 00:00:00',
            '2022-01-17 00:00:00',
            '2022-01-18 00:00:00',
            '2022-01-19 00:00:00',
            '2022-01-20 00:00:00',
            '2022-01-21 00:00:00',
            '2022-01-24 00:00:00',
            '2022-01-25 00:00:00',
            '2022-01-26 00:00:00',
            '2022-01-27 00:00:00',
            '2022-01-28 00:00:00',
            '2022-01-31 00:00:00',
            '2022-02-01 00:00:00',
            '2022-02-02 00:00:00',
            '2022-02-03 00:00:00',
            '2022-02-04 00:00:00',
            '2022-02-07 00:00:00',
            '2022-02-08 00:00:00',
            '2022-02-09 00:00:00',
            '2022-02-10 00:00:00',
            '2022-02-11 00:00:00',
            '2022-02-14 00:00:00',
            '2022-02-15 00:00:00',
            '2022-02-16 00:00:00',
            '2022-02-17 00:00:00',
            '2022-02-18 00:00:00',
            '2022-02-21 00:00:00',
            '2022-02-22 00:00:00',
            '2022-02-23 00:00:00',
            '2022-02-24 00:00:00',
            '2022-02-25 00:00:00',
            '2022-02-28 00:00:00',
            '2022-03-01 00:00:00',
            '2022-03-02 00:00:00',
            '2022-03-03 00:00:00',
            '2022-03-04 00:00:00',
            '2022-03-05 00:00:00',
        ])

        #secs_names = ['ITUB4.SA', 'USDBRL=X']
        secs_names = ['Stock', 'Currency']

        self.secs = pd.DataFrame(
            [
                [ 30.11063385, 4.513199806 ],
                [ 29.08154106, 4.583399773 ],
                [ 28.46217918, 4.606200218 ],
                [ 26.48974037, 4.589799881 ],
                [ 27.14721489, 4.722899914 ],
                [ 24.93656731, 4.642099857 ],
                [ 22.48768997, 4.813799858 ],
                [ 24.97467422, 4.790200233 ],
                [ 22.67826653, 4.852600098 ],
                [ 24.01228142, 4.999000072 ],
                [ 22.34476089, 5.009699821 ],
                [ 21.77303696, 5.103961945 ],
                [ 21.01074028, 5.094200134 ],
                [ 19.55286217, 5.045499802 ],
                [ 21.43953705, 5.141699791 ],
                [ 22.48768997, 5.098100185 ],
                [ 23.10705376, 5.033699989 ],
                [ 21.88738823, 5.022600174 ],
                [ 22.97365189, 5.10462904 ],
                [ 22.00172997, 5.192699909 ],
                [ 20.41963448, 5.203499794 ],
                [ 20.51498283, 5.24819994 ],
                [ 19.714049, 5.255300045 ],
                [ 21.16335739, 5.348499775 ],
                [ 21.94521774, 5.285299778 ],
                [ 23.07033218, 5.221700191 ],
                [ 22.42195572, 5.12349987 ],
                [ 22.42195572, 5.105800152 ],
                [ 22.89870132, 5.105500221 ],
                [ 23.18475021, 5.198500156 ],
                [ 22.3266169, 5.162000179 ],
                [ 21.76405396, 5.236999989 ],
                [ 22.15498413, 5.230899811 ],
                [ 21.60195412, 5.232699871 ],
                [ 21.60195412, 5.315400124 ],
                [ 21.34451736, 5.315000057 ],
                [ 21.03940643, 5.45690012 ],
                [ 19.92382492, 5.533100128 ],
                [ 20.5817305, 5.572599888 ],
                [ 22.27894081, 5.652599812 ],
                [ 22.57451691, 5.497399807 ],
                [ 21.72591461, 5.334799767 ],
                [ 21.72591461, 5.486000061 ],
                [ 20.91560104, 5.477000237 ],
                [ 21.68843964, 5.540599823 ],
                [ 21.24954155, 5.578100204 ],
                [ 20.48625114, 5.715199947 ],
                [ 21.32588318, 5.828719139 ],
                [ 21.3831189, 5.477000237 ],
                [ 20.64844635, 5.817100048 ],
                [ 20.63891151, 5.884799957 ],
                [ 21.54531982, 5.886400223 ],
                [ 20.66752747, 5.809400082 ],
                [ 21.65981796, 5.855199814 ],
                [ 20.72478416, 5.718999863 ],
                [ 20.63891151, 5.755199909 ],
                [ 21.82201508, 5.690499783 ],
                [ 21.93650368, 5.552400112 ],
                [ 22.89062431, 5.528699875 ],
                [ 21.9842141, 5.443399906 ],
                [ 22.67118004, 5.343999863 ],
                [ 22.27044418, 5.272699833 ],
                [ 22.01283577, 5.403600216 ],
                [ 22.63409798, 5.334799767 ],
                [ 24.15213387, 5.366499901 ],
                [ 24.79180519, 5.199299812 ],
                [ 25.5078582, 5.061600208 ],
                [ 26.07115166, 5.117199898 ],
                [ 27.12136833, 4.959499836 ],
                [ 26.5867099, 4.82159996 ],
                [ 25.43148224, 4.89839983 ],
                [ 25.43148224, 4.972199917 ],
                [ 24.92546646, 4.974999905 ],
                [ 24.34308044, 5.047800064 ],
                [ 25.04003899, 5.153206825 ],
                [ 25.35509674, 5.243599892 ],
                [ 26.34802429, 5.227900028 ],
                [ 26.86358635, 5.377200127 ],
                [ 26.03296272, 5.309999943 ],
                [ 25.68925659, 5.251900196 ],
                [ 24.71542542, 5.151000023 ],
                [ 25.01139442, 5.346600056 ],
                [ 24.5913028, 5.359499931 ],
                [ 25.32645981, 5.480899811 ],
                [ 24.34308044, 5.402100086 ],
                [ 24.9933477, 5.461699963 ],
                [ 25.42323929, 5.31619978 ],
                [ 25.37546974, 5.35890007 ],
                [ 26.55048996, 5.311399937 ],
                [ 25.25127846, 5.354300022 ],
                [ 25.79580551, 5.377799988 ],
                [ 25.80535751, 5.342599869 ],
                [ 26.04418808, 5.337800026 ],
                [ 25.66205841, 5.326900005 ],
                [ 26.09195381, 5.401500225 ],
                [ 26.2734552, 5.366799831 ],
                [ 25.83401352, 5.366948128 ],
                [ 26.06329208, 5.330699921 ],
                [ 26.13971191, 5.385300159 ],
                [ 26.59825569, 5.327700138 ],
                [ 25.91999489, 5.169799805 ],
                [ 25.37546974, 5.118100166 ],
                [ 25.34681946, 5.210599899 ],
                [ 26.6173597, 5.229100227 ],
                [ 26.4645105, 5.141421795 ],
                [ 27.0854612, 5.152299881 ],
                [ 26.6269136, 5.168799877 ],
                [ 25.74803596, 5.153900146 ],
                [ 26.15015526, 5.221199989 ],
                [ 24.63037415, 5.318699837 ],
                [ 24.6112587, 5.290200233 ],
                [ 24.95536156, 5.29090023 ],
                [ 24.4296505, 5.331299782 ],
                [ 24.74507256, 5.437200069 ],
                [ 24.45832748, 5.480500221 ],
                [ 24.1811306, 5.380400181 ],
                [ 23.49293633, 5.434999943 ],
                [ 23.71277924, 5.367000103 ],
                [ 23.14882965, 5.420800209 ],
                [ 23.34820067, 5.508299828 ],
                [ 23.23325431, 5.465400219 ],
                [ 23.23325431, 5.556399822 ],
                [ 23.19493377, 5.555900097 ],
                [ 23.57810676, 5.618599892 ],
                [ 23.40567672, 5.610599995 ],
                [ 22.91713416, 5.507400036 ],
                [ 23.29072082, 5.607200146 ],
                [ 23.53021133, 5.568699837 ],
                [ 22.68722426, 5.389999866 ],
                [ 23.47385169, 5.49090004 ],
                [ 23.42592956, 5.397299767 ],
                [ 23.99146796, 5.338699818 ],
                [ 24.0681491, 5.289899826 ],
                [ 24.0681491, 5.301000118 ],
                [ 23.53136588, 5.298299789 ],
                [ 23.56012298, 5.360599995 ],
                [ 23.06168319, 5.308499813 ],
                [ 22.7932849, 5.320499897 ],
                [ 23.19587661, 5.31619978 ],
                [ 22.88914634, 5.268300056 ],
                [ 22.82204772, 5.274300098 ],
                [ 22.85079909, 5.236000061 ],
                [ 22.28526069, 5.237800121 ],
                [ 22.09354735, 5.389800072 ],
                [ 22.28526069, 5.41260004 ],
                [ 21.69095946, 5.469900131 ],
                [ 22.21815635, 5.592400074 ],
                [ 22.10313941, 5.508399963 ],
                [ 22.09354735, 5.561100006 ],
                [ 21.61427642, 5.660200119 ],
                [ 21.71013022, 5.63049984 ],
                [ 21.75870719, 5.608399868 ],
                [ 21.82584968, 5.642000198 ],
                [ 22.05605521, 5.681600094 ],
                [ 22.09442344, 5.573400021 ],
                [ 21.9313623, 5.593800068 ],
                [ 23.24544349, 5.611299992 ],
                [ 23.17829337, 5.598599911 ],
                [ 23.17829337, 5.528999805 ],
                [ 22.95769324, 5.529699802 ],
                [ 22.89054122, 5.568500042 ],
                [ 22.68910613, 5.590499878 ],
                [ 22.32461753, 5.611199856 ],
                [ 22.56441894, 5.644800186 ],
                [ 23.456463, 5.60559988 ],
                [ 23.66748824, 5.604199886 ],
                [ 24.87605681, 5.607800007 ],
                [ 24.55951896, 5.591300011 ],
                [ 24.73217216, 5.61619997 ],
                [ 24.03197112, 5.622700214 ],
                [ 22.96727576, 5.705200195 ],
                [ 23.08237281, 5.744900227 ],
                [ 22.67952361, 5.777800083 ],
                [ 22.67952361, 5.741399765 ],
                [ 23.24640922, 5.741099834 ],
                [ 24.16780929, 5.754899979 ],
                [ 24.73408965, 5.663000107 ],
                [ 24.70529632, 5.52339983 ],
                [ 26.69206885, 5.362699986 ],
                [ 27.89181975, 5.384699821 ],
                [ 27.66146735, 5.413899899 ],
                [ 26.98961333, 5.389999866 ],
                [ 27.49830131, 5.456699848 ],
                [ 28.45809821, 5.456999779 ],
                [ 28.47729949, 5.414899826 ],
                [ 27.78624419, 5.327199936 ],
                [ 27.82463721, 5.361700058 ],
                [ 27.82463721, 5.304500103 ],
                [ 27.9110115, 5.378099918 ],
                [ 28.68845634, 5.440599918 ],
                [ 28.35252265, 5.372600079 ],
                [ 27.75744704, 5.322599888 ],
                [ 27.96860198, 5.335299969 ],
                [ 27.58468513, 5.34250021 ],
                [ 28.75684684, 5.331099987 ],
                [ 28.97772162, 5.204899788 ],
                [ 28.95850699, 5.216300011 ],
                [ 29.24660247, 5.151000023 ],
                [ 29.41945403, 5.154399872 ],
                [ 29.34263175, 5.09829998 ],
                [ 29.51548522, 5.119699955 ],
                [ 30.48539107, 5.169700146 ],
                [ 30.37033115, 5.024199963 ],
                [ 29.96618114, 5.064199924 ],
                [ 30.23561702, 5.1177001 ],
                [ 30.80334506, 5.078884125 ],
                [ 30.76485095, 5.083199978 ],
                [ 30.7167419, 5.056900024 ],
                [ 30.17788348, 5.100599766 ],
                [ 30.32221637, 5.118937969 ],
                [ 30.98617015, 5.156654835 ],
                [ 30.98617015, 5.215300083 ],
                [ 30.98617015, 5.215300083 ],
                [ 31.20748935, 5.215300083 ],
                [ 31.14013324, 5.245900154 ],
                [ 30.68787418, 5.208600044 ],
                [ 30.68787418, 5.190838814 ],
                [ 30.68787418, 5.192100048 ],
                [ 30.01454066, 5.191899776 ],
                [ 29.82199954, 5.295300007 ],
                [ 30.68843555, 5.284100056 ],
                [ 31.87257098, 5.312900066 ],
                [ 31.86293697, 5.408800125 ],
                [ 31.15053844, 5.412188053 ],
                [ 31.24680423, 5.487699986 ],
                [ 30.73657321, 5.321400166 ],
                [ 31.64151096, 5.297500134 ],
                [ 30.45738505, 5.195799828 ],
                [ 30.30335139, 5.29129982 ],
                [ 29.94715022, 5.294799805 ],
                [ 29.45616817, 5.356699944 ],
                [ 29.06145763, 5.290500164 ],
                [ 28.4453287, 5.349500179 ],
                [ 28.4453287, 5.465499878 ],
                [ 27.56021077, 5.465499878 ],
                [ 27.56021077, 5.35379982 ],
                [ 28.65957791, 5.41260004 ],
                [ 27.64700085, 5.437989235 ],
                [ 28.39047642, 5.460800171 ],
                [ 27.7922556, 5.430500031 ],
                [ 27.65717717, 5.366899967 ],
                [ 27.54139347, 5.352000237 ],
                [ 27.42560788, 5.425700188 ],
                [ 26.92387028, 5.36920023 ],
                [ 27.24228115, 5.364299774 ],
                [ 27.04931088, 5.376699924 ],
                [ 27.04931088, 5.384900093 ],
                [ 27.116852, 5.365399837 ],
                [ 27.116852, 5.368599892 ],
                [ 27.116852, 5.368000031 ],
                [ 27.45455189, 5.369400024 ],
                [ 27.2615778, 5.409800053 ],
                [ 26.98176594, 5.425799847 ],
                [ 25.04237194, 5.380700111 ],
                [ 26.62476368, 5.463399887 ],
                [ 26.2388155, 5.439599991 ],
                [ 25.42832394, 5.402964115 ],
                [ 25.27157521, 5.52802515 ],
                [ 24.54382122, 5.597599983 ],
                [ 25.51474751, 5.640699863 ],
                [ 25.57299603, 5.67509985 ],
                [ 26.35944928, 5.617499828 ],
                [ 27.32066143, 5.668300152 ],
                [ 26.46625126, 5.689499855 ],
                [ 26.82549656, 5.874599934 ],
                [ 27.01967801, 5.801499844 ],
                [ 27.05850972, 5.67110014 ],
                [ 26.8837508, 5.534800053 ],
                [ 27.19444645, 5.495155811 ],
                [ 26.65073384, 5.614500046 ],
                [ 27.67019833, 5.623400211 ],
                [ 27.82554997, 5.583099842 ],
                [ 27.88380612, 5.558700085 ],
                [ 28.03914631, 5.493563175 ],
                [ 27.34008778, 5.50549984 ],
                [ 26.87404431, 5.520400047 ],
                [ 27.34008778, 5.619599819 ],
                [ 27.84852006, 5.64839983 ],
                [ 27.83879449, 5.752399921 ],
                [ 28.28623941, 5.780799866 ],
                [ 27.751251, 5.77159977 ],
                [ 26.93413774, 5.631299973 ],
                [ 26.93413774, 5.707399845 ],
                [ 27.27476732, 5.710599899 ],
                [ 26.96333352, 5.662700176 ],
                [ 26.7297577, 5.593200207 ],
                [ 26.5253853, 5.612100124 ],
                [ 26.48644868, 5.566599846 ],
                [ 27.12878457, 5.679299831 ],
                [ 27.11904947, 5.732200146 ],
                [ 27.45968286, 5.716300011 ],
                [ 27.45968286, 5.652900219 ],
                [ 27.76138345, 5.614999771 ],
                [ 27.35262529, 5.585800171 ],
                [ 27.21637193, 5.545300007 ],
                [ 27.21637193, 5.567900181 ],
                [ 27.22610513, 5.567900181 ],
                [ 27.35262529, 5.443200111 ],
                [ 27.3331627, 5.477200031 ],
                [ 26.92440835, 5.435299873 ],
                [ 28.12826346, 5.451000214 ],
                [ 27.26027487, 5.341400146 ],
                [ 27.46508215, 5.336400032 ],
                [ 27.85576308, 5.439700127 ],
                [ 26.69457114, 5.438099861 ],
                [ 27.43616927, 5.442599773 ],
                [ 27.27028716, 5.352700233 ],
                [ 27.5922991, 5.273430824 ],
                [ 27.99237502, 5.235499859 ],
                [ 27.93382514, 5.222199917 ],
                [ 27.53375304, 5.221199989 ],
                [ 28.31438696, 5.303100109 ],
                [ 28.92913497, 5.307700157 ],
                [ 28.90961897, 5.269499779 ],
                [ 28.85107481, 5.271500111 ],
                [ 29.05598891, 5.259500027 ],
                [ 29.21211874, 5.308000088 ],
                [ 29.34872496, 5.281300068 ],
                [ 29.27066481, 5.361800194 ],
                [ 29.02494642, 5.318500042 ],
                [ 29.41591474, 5.330699921 ],
                [ 29.17155668, 5.310500145 ],
                [ 29.64071867, 5.238200188 ],
                [ 29.55275557, 5.237999916 ],
                [ 30.61900984, 5.216599941 ],
                [ 31.61648069, 5.149700165 ],
                [ 31.61648069, 5.074500084 ],
                [ 32.26189886, 5.076300144 ],
                [ 33.00512014, 5.04460001 ],
                [ 32.78019415, 5.045199871 ],
                [ 33.22025, 5.034900188 ],
                [ 33.10291372, 5.061500072 ],
                [ 32.7215241, 5.054500103 ],
                [ 32.61395346, 5.117000103 ],
                [ 32.61395346, 5.058599949 ],
                [ 33.24959265, 5.043799877 ],
                [ 32.86820684, 5.054299831 ],
                [ 32.28146254, 5.007400036 ],
                [ 32.42814718, 5.096000195 ],
                [ 32.01742063, 5.013100147 ],
                [ 31.79250227, 4.957099915 ],
                [ 31.80228315, 4.965199947 ],
                [ 30.81459127, 4.912700176 ],
                [ 30.47232519, 4.915400028 ],
                [ 30.17894636, 4.924799919 ],
                [ 29.83667837, 4.95510006 ],
                [ 29.75872755, 4.969200134 ],
                [ 30.07181692, 5.045102119 ],
                [ 29.67067099, 5.05919981 ],
                [ 29.62175131, 5.088459015 ],
                [ 29.74894857, 5.195300102 ],
                [ 29.36736822, 5.231200218 ],
                [ 29.36736822, 5.257999897 ],
                [ 29.75872755, 5.257900238 ],
                [ 29.93484259, 5.172699928 ],
                [ 29.97397947, 5.162399769 ],
                [ 29.62175131, 5.069900036 ],
                [ 29.15211821, 5.110000134 ],
                [ 28.98578787, 5.115399837 ],
                [ 29.35758352, 5.250899792 ],
                [ 29.47499037, 5.219900131 ],
                [ 29.18146849, 5.187300205 ],
                [ 29.10319853, 5.19960022 ],
                [ 29.60218573, 5.197899818 ],
                [ 29.88592672, 5.17539978 ],
                [ 30.83497953, 5.169099808 ],
                [ 30.67842627, 5.114799976 ],
                [ 30.3555541, 5.08039999 ],
                [ 30.55165304, 5.20870018 ],
                [ 30.84531607, 5.174600124 ],
                [ 30.00347341, 5.196800232 ],
                [ 30.09157576, 5.168200016 ],
                [ 30.91384138, 5.245200157 ],
                [ 31.26624502, 5.231999874 ],
                [ 30.68869413, 5.231800079 ],
                [ 31.02152265, 5.188300133 ],
                [ 30.45376409, 5.218200207 ],
                [ 30.85511221, 5.252200127 ],
                [ 30.62877299, 5.247499943 ],
                [ 30.52072551, 5.259699821 ],
                [ 30.57966067, 5.294300079 ],
                [ 30.19660022, 5.378600121 ],
                [ 30.08855846, 5.41410017 ],
                [ 30.40286471, 5.379000187 ],
                [ 31.22791698, 5.379899979 ],
                [ 31.26720454, 5.245800018 ],
                [ 30.53054835, 5.210999966 ],
                [ 31.04129817, 5.251599789 ],
                [ 30.82521464, 5.202799797 ],
                [ 31.21809604, 5.182899952 ],
                [ 31.36575595, 5.149300098 ],
                [ 30.26515475, 5.184599876 ],
                [ 30.09809772, 5.181799889 ],
                [ 30.47151462, 5.189799786 ],
                [ 30.47151462, 5.169300079 ],
                [ 29.06628314, 5.16960001 ],
                [ 29.43970195, 5.320600033 ],
                [ 29.1547269, 5.196499825 ],
                [ 29.50849239, 5.247000217 ],
                [ 29.33160678, 5.213200092 ],
                [ 28.86974803, 5.238900185 ],
                [ 28.85009471, 5.221700191 ],
                [ 28.18187419, 5.256800175 ],
                [ 27.56278697, 5.289700031 ],
                [ 27.49399654, 5.323200226 ],
                [ 28.11308185, 5.268899918 ],
                [ 29.05645648, 5.287700176 ],
                [ 28.66338626, 5.30189991 ],
                [ 29.39056865, 5.336999893 ],
                [ 28.74199763, 5.390399933 ],
                [ 29.24316493, 5.427599907 ],
                [ 29.27264873, 5.414299965 ],
                [ 30.02995448, 5.441699982 ],
                [ 24.78955417, 5.367899895 ],
                [ 25.36963611, 5.453199863 ],
                [ 25.44828944, 5.475500107 ],
                [ 24.92719989, 5.491899967 ],
                [ 25.10417132, 5.517000198 ],
                [ 24.68139987, 5.506899834 ],
                [ 24.68139987, 5.535999775 ],
                [ 24.71089702, 5.531499863 ],
                [ 24.59291415, 5.512499809 ],
                [ 25.20248942, 5.512199879 ],
                [ 25.36963611, 5.458399773 ],
                [ 24.78955417, 5.511300087 ],
                [ 25.42862468, 5.583300114 ],
                [ 24.92719989, 5.596300125 ],
                [ 24.00300174, 5.657800198 ],
                [ 24.45526843, 5.649199963 ],
                [ 24.19963794, 5.554399967 ],
                [ 24.3766151, 5.564799786 ],
                [ 24.32745319, 5.534999847 ],
                [ 23.77686458, 5.644899845 ],
                [ 24.70726291, 5.633699894 ],
                [ 24.70726291, 5.678899765 ],
                [ 24.93356792, 5.678599834 ],
                [ 23.66429416, 5.552400112 ],
                [ 23.38879101, 5.601699829 ],
                [ 23.2707185, 5.541100025 ],
                [ 23.04441349, 5.54309988 ],
                [ 23.60525791, 5.479100227 ],
                [ 23.55605976, 5.489900112 ],
                [ 23.50686161, 5.397999763 ],
                [ 23.50686161, 5.457600117 ],
                [ 23.2707185, 5.456299782 ],
                [ 23.35927097, 5.502200127 ],
                [ 22.98537914, 5.528699875 ],
                [ 22.79843036, 5.556399822 ],
                [ 23.11730075, 5.611599922 ],
                [ 23.48573184, 5.585599899 ],
                [ 24.08318591, 5.570400238 ],
                [ 24.29229617, 5.605199814 ],
                [ 23.85416102, 5.565100193 ],
                [ 23.70480036, 5.607800007 ],
                [ 23.42598414, 5.600699902 ],
                [ 23.30177699, 5.620871067 ],
                [ 24.13887225, 5.691566944 ],
                [ 24.0591489, 5.643321991 ],
                [ 24.32821666, 5.650098801 ],
                [ 24.0392171, 5.688000202 ],
                [ 23.81997882, 5.611800194 ],
                [ 23.21208774, 5.531599998 ],
                [ 23.24198352, 5.571100235 ],
                [ 22.65402042, 5.608661175 ],
                [ 22.86329662, 5.679699898 ],
                [ 22.79353725, 5.680600166 ],
                [ 23.01278125, 5.679399967 ],
                [ 22.53443729, 5.687399864 ],
                [ 22.20557796, 5.693059921 ],
                [ 22.23547374, 5.741300106 ],
                [ 22.31519519, 5.743999958 ],
                [ 22.42481815, 5.652999878 ],
                [ 22.42481815, 5.671795845 ],
                [ 22.64405834, 5.67110014 ],
                [ 22.56433307, 5.624100208 ],
                [ 22.38495265, 5.627500057 ],
                [ 22.03616725, 5.702700138 ],
                [ 22.03616725, 5.570199966 ],
                [ 22.6299548, 5.569300175 ],
                [ 23.23836086, 5.681200027 ],
                [ 22.81945751, 5.676199913 ],
                [ 23.25830601, 5.705635071 ],
                [ 23.74702404, 5.682400227 ],
                [ 23.95647762, 5.632199764 ],
                [ 24.46514271, 5.662199974 ],
                [ 24.36540363, 5.567299843 ],
                [ 24.79428051, 5.533199787 ],
                [ 24.61475132, 5.52670002 ],
                [ 24.61475132, 5.533299923 ],
                [ 24.7543845, 5.515799999 ],
                [ 24.59480236, 5.565700054 ],
                [ 24.40529964, 5.437200069 ],
                [ 24.41527317, 5.41809988 ],
                [ 24.3853545, 5.457099915 ],
                [ 25.22315548, 5.486100197 ],
                [ 25.48247478, 5.440703869 ],
                [ 25.60216091, 5.429166794 ],
                [ 25.90137623, 5.403484821 ],
                [ 26.4399638, 5.36259985 ],
                [ 26.63492283, 5.303100109 ],
                [ 26.23568997, 5.264500141 ],
                [ 26.52513203, 5.260900021 ],
                [ 26.60497937, 5.282899857 ],
                [ 26.46524891, 5.326900005 ],
                [ 26.74471173, 5.262599945 ],
                [ 25.72667012, 5.258399963 ],
                [ 26.19576726, 5.234499931 ],
                [ 27.67292676, 5.248700142 ],
                [ 27.61303982, 5.249956131 ],
                [ 27.86255917, 5.214000225 ],
                [ 27.58310017, 5.157899857 ],
                [ 27.21380887, 5.135799885 ],
                [ 27.31361851, 5.170599937 ],
                [ 26.67484746, 5.137499809 ],
                [ 26.92184295, 5.102700233 ],
                [ 26.56234016, 5.057099819 ],
                [ 26.13293685, 5.008699894 ],
                [ 26.64222946, 5.122200012 ],
                [ 26.64222946, 5.159399986 ],
                [ 26.64222946, 5.158400059 ],
                [ 26.23782326, 5.15899992 ],
                [ 26.29281724, 5.096502781 ],
                [ 25.91281808, 5.096502781 ],
                [ 25.91281808, 5.074399948 ],
            ],
            columns = secs_names,
            index = pf_params_idx
        )

        self.pfs = {
            asset_name: portfolio.Portfolio(securities_values = self.secs[asset_name]) 
            for asset_name in secs_names
        }
        self.params = {}
        self.params_portfolio = {}
        self.params_portfolio_build = {}

        for asset_name, pf in self.pfs.items():

            S0 = pf.portfolio_total.iloc[-1]
            K = S0
            r = np.log(1 + 0.0915)
            q = 0
            if asset_name == 'Currency':
                rf = np.log(1 + 0.01507)
            else:
                rf = None
            
            T = 0.25
            N = 200
            
            vol = volm.Hist(portfolio = pf).vol

            self.params[asset_name] = dict(
                S0 = S0, K = K, r = r, q = q, rf = rf,
                N = N, T = T, vol = vol
            )

            self.params_portfolio[asset_name] = dict(
                K = K, r = r, q = q, rf = rf, N = N, T = T,
                portfolio = pf, volmodel = 'hist'
            )

            self.params_portfolio_build[asset_name] = dict(
                K = K, r = r, q = q, rf = rf, N = N, T = T,
                securities_values = self.secs[asset_name], volmodel = 'hist'
            )

        self.expected_derivative_prices = {
            'EuropeanCallStockOption': 2.392229,
            'EuropeanPutStockOption': 1.831206,
            'AmericanCallStockOption': 2.392229,
            'AmericanPutStockOption': 1.881736,
            'EuropeanCallCurrencyOption': 0.246221,
            'EuropeanPutCurrencyOption': 0.155298,
            'AmericanCallCurrencyOption': 0.246221,
            'AmericanPutCurrencyOption': 0.1640165,
        }

    def test_abstractness(self):

        for abc in bt.BUILDINGBLOCKS:
            cls_name = abc.__name__
            with self.assertRaisesRegex(
                (TypeError, AttributeError), 'abstract|argument|(attribute.*price)',
                msg = f"Was able to instantiate the abstract class '{cls_name}' or get the property 'price'."
            ):
                c = abc(**self.params['Stock'])
                _ = c.price
            
    def test_instantiation(self):
        for cls in bt.MODELS:
            cls_name = cls.__name__
            
            # if the code raises an exception, then the test will 'error out',
            # which is materially the same as a failed test
            c = cls(**self.params['Stock'])
            x = c.price
    
    def test_instantiation_portfolio(self):
        for cls in bt.MODELS:
            cls_name = cls.__name__
            
            # if the code raises an exception, then the test will 'error out',
            # which is materially the same as a failed test
            c = cls(**self.params_portfolio['Stock'])
            x = c.price
    
    def test_instantiation_portfolio_build(self):
        for cls in bt.MODELS:
            cls_name = cls.__name__
            
            # if the code raises an exception, then the test will 'error out',
            # which is materially the same as a failed test
            c = cls(**self.params_portfolio_build['Stock'])
            x = c.price
    
    def test_conflicting_arguments(self):
      
        # get the MODELS constant in the binomialtree module
        # this constant contains only the instantiable models
        model_dict = { klass.__name__: klass for klass in bt.MODELS }
        
        default_S0 = M(10)
        default_vol = 0.5

        # for each model...
        for i, (der_name, der_model) in enumerate(model_dict.items()):

            # ... and search the assets info pfor portfolio information:
            for asset_name in self.params_portfolio:
                if asset_name in der_name:
                    # if we find it, store it and break out of the loop
                    der_portfolio = der_model(
                        S0 = default_S0, vol = default_vol, 
                        **self.params_portfolio[asset_name]
                    )
                    break
            
            # ... and search the assets info for portfolio building parameters:
            for asset_name in self.params_portfolio_build:
                if asset_name in der_name:
                    # if we find it, store it and break out of the loop
                    der_portfolio_build = der_model(
                        S0 = default_S0, vol = default_vol, 
                        **self.params_portfolio_build[asset_name]
                    )
                    break
        
            self.assertAlmostEqual(
                M(der_portfolio.S0), default_S0, places = 0,
                msg = (
                    f"Wrong derivative {der_name} parameters."
                    f"Expected {default_S0}, got {M(der_portfolio.S0)}"
                )
            )

            self.assertAlmostEqual(
                M(der_portfolio_build.S0), default_S0, places = 0,
                msg = (
                    f"Wrong derivative {der_name} parameters (portfolio build version)."
                    f"Expected {default_S0}, got {M(der_portfolio_build.S0)}"
                )
            )

            self.assertAlmostEqual(
                der_portfolio.vol, default_vol, places = 0,
                msg = (
                    f"Wrong derivative {der_name} parameters."
                    f"Expected {default_vol:.3%} p.a., got {der_portfolio.vol:.3%} p.a."
                )
            )

            self.assertAlmostEqual(
                der_portfolio_build.vol, default_vol, places = 0,
                msg = (
                    f"Wrong derivative {der_name} parameters."
                    f"Expected {default_vol:.3%} p.a., got {der_portfolio_build.vol:.3%} p.a."
                )
            )

    def test_correct_prices(self):

        # ground truth: http://math.columbia.edu/~smirnov/options13.html
        # on that page, T (days) is divided by 365. Convert accordingly
        # So the expiration field in the page is 365 * T (years)
        
        # get the MODELS constant in the binomialtree module
        # this constant contains only the instantiable models
        model_dict = { klass.__name__: klass for klass in bt.MODELS }
        
        # transform comparison prices into a dictionary with money
        expected_prices = { k: M(v) for k, v in self.expected_derivative_prices.items() }
        
        # for each model for which we have comparison data...
        for i, (der_name, price_expected) in enumerate(expected_prices.items()):

            # ... get the actual class for the model...
            option_model = model_dict[der_name]

            # ... and search the assets info (derivative params, portfolio etc).
            for asset_name in self.params:
                if asset_name in der_name:
                    # if we find it, store it and break out of the loop
                    option = option_model(**self.params[asset_name])
                    break
                
            # run the calculations
            price = M(option.price)

            self.assertAlmostEqual(
                price, price_expected, delta = 1e-3,
                msg = (
                    f"Wrong derivative {der_name} ({i+1} of {len(expected_prices)} value comparisons) result. "
                    f"Expected {price_expected}, got {price}"
                )
            )

    def test_correct_prices_portfolio(self):

        # ground truth: http://math.columbia.edu/~smirnov/options13.html
        # on that page, T (days) is divided by 365. Convert accordingly
        # So the expiration field in the page is 365 * T (years)
        
        # get the MODELS constant in the binomialtree module
        # this constant contains only the instantiable models
        model_dict = { klass.__name__: klass for klass in bt.MODELS }
        
        # transform comparison prices into a dictionary with money
        expected_prices = { k: M(v) for k, v in self.expected_derivative_prices.items() }
        
        # for each model for which we have comparison data...
        for i, (der_name, price_expected) in enumerate(expected_prices.items()):

            # ... get the actual class for the model...
            option_model = model_dict[der_name]

            # ... and search the assets info (derivative params, portfolio etc).
            for asset_name in self.params_portfolio:
                if asset_name in der_name:
                    # if we find it, store it and break out of the loop
                    option = option_model(**self.params_portfolio_build[asset_name])
                    break
                
            # run the calculations
            price = M(option.price)

            self.assertAlmostEqual(
                price, price_expected, delta = 1e-3,
                msg = (
                    f"Wrong derivative {der_name} ({i+1} of {len(expected_prices)} value comparisons) result. "
                    f"Expected {price_expected}, got {price}"
                )
            )

    def test_correct_prices_portfolio_build(self):

        # ground truth: http://math.columbia.edu/~smirnov/options13.html
        # on that page, T (days) is divided by 365. Convert accordingly
        # So the expiration field in the page is 365 * T (years)
        
        # get the MODELS constant in the binomialtree module
        # this constant contains only the instantiable models
        model_dict = { klass.__name__: klass for klass in bt.MODELS }
        
        # transform comparison prices into a dictionary with money
        expected_prices = { k: M(v) for k, v in self.expected_derivative_prices.items() }
        
        # for each model for which we have comparison data...
        for i, (der_name, price_expected) in enumerate(expected_prices.items()):

            # ... get the actual class for the model...
            option_model = model_dict[der_name]

            # ... and search the assets info (derivative params, portfolio etc).
            for asset_name in self.params_portfolio_build:
                if asset_name in der_name:
                    # if we find it, store it and break out of the loop
                    option = option_model(**self.params_portfolio_build[asset_name])
                    break
                
            # run the calculations
            price = M(option.price)

            self.assertAlmostEqual(
                price, price_expected, delta = 1e-3,
                msg = (
                    f"Wrong derivative {der_name} ({i+1} of {len(expected_prices)} value comparisons) result. "
                    f"Expected {price_expected}, got {price}"
                )
            )
